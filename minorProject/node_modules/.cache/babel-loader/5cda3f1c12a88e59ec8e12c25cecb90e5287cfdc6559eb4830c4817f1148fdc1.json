{"ast":null,"code":"var _jsxFileName = \"/home/sailesh/Downloads/minor-project/minorProject/src/components/Examconfirmation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport QuestionBox from './QuestionBox';\nimport Questiongen from './Questiongen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Examconfirmation() {\n  _s();\n  //for confirmation page\n  const [examStart, setexamStart] = useState(false);\n\n  //for confirmation box\n  const boxStyle = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    zIndex: 9999\n  };\n  const contentStyle = {\n    backgroundColor: '#fff',\n    padding: '20px',\n    borderRadius: '5px',\n    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',\n    maxWidth: '400px',\n    textAlign: 'center'\n  };\n  const buttonStyle = {\n    margin: '0 10px',\n    padding: '10px 20px',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  };\n  const confirmButtonStyle = {\n    ...buttonStyle,\n    backgroundColor: 'grey',\n    color: '#fff'\n  };\n  const cancelButtonStyle = {\n    ...buttonStyle,\n    backgroundColor: 'grey',\n    color: '#fff'\n  };\n  const handleExamStart = () => {\n    setexamStart(true);\n    console.log(examStart);\n  };\n  const handleExamAbort = () => {\n    setexamStart(false);\n  };\n\n  //Timer\n\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null);\n\n  // The state for our timer\n  const [timer, setTimer] = useState('02:00:00');\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / 1000 / 60 / 60 % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds\n    };\n  };\n  const startTimer = e => {\n    let {\n      total,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(e);\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to \n      // add '0' at the beginning of the variable\n      setTimer((hours > 9 ? hours : '0' + hours) + ':' + (minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  };\n  const clearTimer = e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next    \n    setTimer('02:00:00');\n\n    // If you try to remove this line the \n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n  const getDeadTime = () => {\n    let deadline = new Date();\n\n    // This is where you need to adjust if \n    // you entend to add more time\n    deadline.setSeconds(deadline.getSeconds() + 7200);\n    return deadline;\n  };\n\n  // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n\n  // We put empty array to act as componentDid\n  // mount only\n  useEffect(() => {\n    clearTimer(getDeadTime());\n  }, []);\n\n  // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n  };\n  const [examOver, setexamOver] = useState(false);\n  const examFinished = () => {\n    setexamOver(true);\n  };\n  if (examOver === \"00:00:00\") {\n    setexamOver(true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!examStart && !examOver && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: boxStyle,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: contentStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Are you sure you are ready to take the exam?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: confirmButtonStyle,\n              onClick: handleExamStart,\n              children: \"Yes, I am ready\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: cancelButtonStyle,\n              onClick: handleExamAbort,\n              children: \"Return back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false), examStart && !examOver && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        class: \"btn btn-primary position-fixed\",\n        style: {\n          bottom: 50,\n          right: 20,\n          zIndex: 101\n        },\n        onClick: examFinished,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"position-fixed\",\n        style: {\n          bottom: 0,\n          right: 0,\n          zIndex: 101,\n          backgroundColor: \"grey\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [timer, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Questiongen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true), examOver && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"The exam is finished.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n}\n_s(Examconfirmation, \"hMzTQnT/fwvICaSsrDd13AG/mX4=\");\n_c = Examconfirmation;\nvar _c;\n$RefreshReg$(_c, \"Examconfirmation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","QuestionBox","Questiongen","jsxDEV","_jsxDEV","Fragment","_Fragment","Examconfirmation","_s","examStart","setexamStart","boxStyle","position","top","left","width","height","display","alignItems","justifyContent","backgroundColor","zIndex","contentStyle","padding","borderRadius","boxShadow","maxWidth","textAlign","buttonStyle","margin","cursor","confirmButtonStyle","color","cancelButtonStyle","handleExamStart","console","log","handleExamAbort","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","onClickReset","examOver","setexamOver","examFinished","children","style","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","class","bottom","right","className","_c","$RefreshReg$"],"sources":["/home/sailesh/Downloads/minor-project/minorProject/src/components/Examconfirmation.js"],"sourcesContent":["import React, { useState , useEffect, useRef} from 'react';\r\nimport QuestionBox from './QuestionBox';\r\nimport Questiongen from './Questiongen';\r\n\r\nexport default function Examconfirmation() {\r\n\r\n    //for confirmation page\r\n    const [examStart, setexamStart] = useState(false);\r\n\r\n    //for confirmation box\r\n    const boxStyle = {\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n        zIndex: 9999,\r\n      };\r\n    \r\n      const contentStyle = {\r\n        backgroundColor: '#fff',\r\n        padding: '20px',\r\n        borderRadius: '5px',\r\n        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',\r\n        maxWidth: '400px',\r\n        textAlign: 'center',\r\n      };\r\n    \r\n      const buttonStyle = {\r\n        margin: '0 10px',\r\n        padding: '10px 20px',\r\n        borderRadius: '5px',\r\n        cursor: 'pointer',\r\n      };\r\n    \r\n      const confirmButtonStyle = {\r\n        ...buttonStyle,\r\n        backgroundColor: 'grey',\r\n        color: '#fff',\r\n      };\r\n    \r\n      const cancelButtonStyle = {\r\n        ...buttonStyle,\r\n        backgroundColor: 'grey',\r\n        color: '#fff',\r\n      };\r\n\r\n      const handleExamStart= () => {\r\n            setexamStart(true); \r\n            console.log(examStart);\r\n      }\r\n\r\n      const handleExamAbort= () => {\r\n        setexamStart(false); \r\n      }\r\n\r\n    //Timer\r\n\r\n      // We need ref in this, because we are dealing\r\n    // with JS setInterval to keep track of it and\r\n    // stop it when needed\r\n    const Ref = useRef(null);\r\n  \r\n    // The state for our timer\r\n    const [timer, setTimer] = useState('02:00:00');\r\n  \r\n  \r\n    const getTimeRemaining = (e) => {\r\n        const total = Date.parse(e) - Date.parse(new Date());\r\n        const seconds = Math.floor((total / 1000) % 60);\r\n        const minutes = Math.floor((total / 1000 / 60) % 60);\r\n        const hours = Math.floor((total / 1000 / 60 / 60) % 24);\r\n        return {\r\n            total, hours, minutes, seconds\r\n        };\r\n    }\r\n  \r\n  \r\n    const startTimer = (e) => {\r\n        let { total, hours, minutes, seconds } \r\n                    = getTimeRemaining(e);\r\n        if (total >= 0) {\r\n  \r\n            // update the timer\r\n            // check if less than 10 then we need to \r\n            // add '0' at the beginning of the variable\r\n            setTimer(\r\n                (hours > 9 ? hours : '0' + hours) + ':' +\r\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\r\n                + (seconds > 9 ? seconds : '0' + seconds)\r\n            )\r\n        }\r\n    }\r\n  \r\n  \r\n    const clearTimer = (e) => {\r\n  \r\n        // If you adjust it you should also need to\r\n        // adjust the Endtime formula we are about\r\n        // to code next    \r\n        setTimer('02:00:00');\r\n  \r\n        // If you try to remove this line the \r\n        // updating of timer Variable will be\r\n        // after 1000ms or 1sec\r\n        if (Ref.current) clearInterval(Ref.current);\r\n        const id = setInterval(() => {\r\n            startTimer(e);\r\n        }, 1000)\r\n        Ref.current = id;\r\n    }\r\n  \r\n    const getDeadTime = () => {\r\n        let deadline = new Date();\r\n  \r\n        // This is where you need to adjust if \r\n        // you entend to add more time\r\n        deadline.setSeconds(deadline.getSeconds() + 7200);\r\n        return deadline;\r\n    }\r\n  \r\n    // We can use useEffect so that when the component\r\n    // mount the timer will start as soon as possible\r\n  \r\n    // We put empty array to act as componentDid\r\n    // mount only\r\n    useEffect(() => {\r\n        clearTimer(getDeadTime());\r\n    }, []);\r\n  \r\n    // Another way to call the clearTimer() to start\r\n    // the countdown is via action event from the\r\n    // button first we create function to be called\r\n    // by the button\r\n    const onClickReset = () => {\r\n      clearTimer(getDeadTime());\r\n  }\r\n  \r\n  const  [examOver, setexamOver] = useState(false);\r\n\r\n  const examFinished = () => {\r\n      setexamOver(true);\r\n  }\r\n\r\n  if (examOver === \"00:00:00\"){\r\n      setexamOver(true);\r\n  }\r\n\r\n      \r\n    return(\r\n        <div>\r\n        {(!examStart && !examOver) && (\r\n        <>\r\n        <div style={boxStyle}>\r\n        <div style={contentStyle}>\r\n          <h3>Are you sure you are ready to take the exam?</h3>\r\n          <div>\r\n            <button style={confirmButtonStyle} onClick={handleExamStart} >\r\n              Yes, I am ready\r\n            </button>\r\n            <button style={cancelButtonStyle} onClick={handleExamAbort}>\r\n              Return back\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div> \r\n      </>)}\r\n      {(examStart && !examOver) &&\r\n        (<>\r\n            <button type=\"button\" class=\"btn btn-primary position-fixed\" style={{bottom: 50, right:20, zIndex: 101}} onClick ={examFinished}>Submit</button>\r\n\r\n            <div className=\"position-fixed\"  style={{bottom: 0, right:0, zIndex: 101, backgroundColor: \"grey\"}}>\r\n                <h2>{timer} </h2> \r\n            </div>\r\n      <Questiongen />\r\n\r\n      </>)}\r\n\r\n      {examOver &&\r\n      (\r\n        <h1>The exam is finished.</h1>\r\n      )}\r\n      </div>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}